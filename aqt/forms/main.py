# -*- coding: utf-8 -*-
# pylint: disable=unsubscriptable-object,unused-import
from anki.lang import _
# Form implementation generated from reading ui file 'designer/main.ui'
#
# Created by: PyQt5 UI code generator 5.13.0
#
# WARNING! All changes made in this file will be lost!


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(412, 301)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(400, 0))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/anki.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background :url(:/icons/Mainwindow_bg.jpg)")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setAutoFillBackground(False)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setShortcut("Ctrl+Q")
        self.actionExit.setObjectName("actionExit")
        self.actionPreferences = QtWidgets.QAction(MainWindow)
        self.actionPreferences.setShortcut("Ctrl+P")
        self.actionPreferences.setMenuRole(QtWidgets.QAction.PreferencesRole)
        self.actionPreferences.setObjectName("actionPreferences")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setMenuRole(QtWidgets.QAction.AboutRole)
        self.actionAbout.setObjectName("actionAbout")
        self.actionUndo = QtWidgets.QAction(MainWindow)
        self.actionUndo.setEnabled(False)
        self.actionUndo.setShortcut("Ctrl+Z")
        self.actionUndo.setObjectName("actionUndo")
        self.actionCheckMediaDatabase = QtWidgets.QAction(MainWindow)
        self.actionCheckMediaDatabase.setObjectName("actionCheckMediaDatabase")
        self.actionOpenPluginFolder = QtWidgets.QAction(MainWindow)
        self.actionOpenPluginFolder.setObjectName("actionOpenPluginFolder")
        self.actionDonate = QtWidgets.QAction(MainWindow)
        self.actionDonate.setObjectName("actionDonate")
        self.actionDownloadSharedPlugin = QtWidgets.QAction(MainWindow)
        self.actionDownloadSharedPlugin.setStatusTip("")
        self.actionDownloadSharedPlugin.setObjectName("actionDownloadSharedPlugin")
        self.actionFullDatabaseCheck = QtWidgets.QAction(MainWindow)
        self.actionFullDatabaseCheck.setObjectName("actionFullDatabaseCheck")
        self.actionDocumentation = QtWidgets.QAction(MainWindow)
        self.actionDocumentation.setShortcut("F1")
        self.actionDocumentation.setObjectName("actionDocumentation")
        self.actionSwitchProfile = QtWidgets.QAction(MainWindow)
        self.actionSwitchProfile.setShortcut("Ctrl+Shift+P")
        self.actionSwitchProfile.setObjectName("actionSwitchProfile")
        self.actionExport = QtWidgets.QAction(MainWindow)
        self.actionExport.setShortcut("Ctrl+E")
        self.actionExport.setObjectName("actionExport")
        self.actionImport = QtWidgets.QAction(MainWindow)
        self.actionImport.setShortcut("Ctrl+Shift+I")
        self.actionImport.setObjectName("actionImport")
        self.actionStudyDeck = QtWidgets.QAction(MainWindow)
        self.actionStudyDeck.setShortcut("/")
        self.actionStudyDeck.setObjectName("actionStudyDeck")
        self.actionEmptyCards = QtWidgets.QAction(MainWindow)
        self.actionEmptyCards.setObjectName("actionEmptyCards")
        self.actionCreateFiltered = QtWidgets.QAction(MainWindow)
        self.actionCreateFiltered.setShortcut("F")
        self.actionCreateFiltered.setObjectName("actionCreateFiltered")
        self.actionNoteTypes = QtWidgets.QAction(MainWindow)
        self.actionNoteTypes.setShortcut("Ctrl+Shift+N")
        self.actionNoteTypes.setObjectName("actionNoteTypes")
        self.actionAdd_ons = QtWidgets.QAction(MainWindow)
        self.actionAdd_ons.setShortcut("Ctrl+Shift+A")
        self.actionAdd_ons.setObjectName("actionAdd_ons")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_("Anki"))
        self.actionExit.setText(_("E&xit"))
        self.actionPreferences.setText(_("&Preferences..."))
        self.actionPreferences.setStatusTip(_("Configure interface language and options"))
        self.actionAbout.setText(_("&About..."))
        self.actionUndo.setText(_("&Undo"))
        self.actionCheckMediaDatabase.setText(_("Check &Media..."))
        self.actionCheckMediaDatabase.setStatusTip(_("Check the files in the media directory"))
        self.actionOpenPluginFolder.setText(_("&Open Add-ons Folder..."))
        self.actionDonate.setText(_("&Support Anki..."))
        self.actionDownloadSharedPlugin.setText(_("&Browse and Install..."))
        self.actionFullDatabaseCheck.setText(_("&Check Database"))
        self.actionDocumentation.setText(_("&Guide..."))
        self.actionSwitchProfile.setText(_("&Switch Profile"))
        self.actionExport.setText(_("&Export..."))
        self.actionImport.setText(_("&Import..."))
        self.actionStudyDeck.setText(_("Study Deck..."))
        self.actionEmptyCards.setText(_("Empty Cards..."))
        self.actionCreateFiltered.setText(_("Create Filtered Deck..."))
        self.actionNoteTypes.setText(_("Manage Note Types"))
        self.actionAdd_ons.setText(_("Add-ons"))
from . import icons_rc
